package com.barcode.controller;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.Writer;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitArray;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.oned.Code128Writer;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.google.zxing.qrcode.encoder.QRCode;

@RestController
public class BarCodeController {
	
	@GetMapping("/barcode")
	public ResponseEntity<Map<String,Object>> barCode(){
		Map<String,Object> json=new HashMap<>();
		json.put("data", "success");
		int defaultImgWidth=500;
		int defaultImgHeight=90;
		int perRow=2;
		List<String> ls=new ArrayList<>();
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		ls.add("SDFGHJKL3456789");
		
		getBarCodeImage(ls, defaultImgWidth, defaultImgHeight,perRow);
		return new ResponseEntity<>(json,HttpStatus.OK);
	}

	public void getBarCodeImage(List<String> ls, int width, int height,int perRow) {
		try {
			int rowSize=ls.size()==1?2:ls.size();
			
			Hashtable<EncodeHintType, ErrorCorrectionLevel> hintMap = new Hashtable<EncodeHintType, ErrorCorrectionLevel>();
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
			BufferedImage newImage = new BufferedImage(perRow*width, rowSize*height,
			        BufferedImage.TYPE_BYTE_GRAY);
			    Graphics2D g2 = newImage.createGraphics();
			    Color oldColor = g2.getColor();
			    g2.setPaint(Color.BLACK);
			    g2.fillRect(0, 0, perRow*width, rowSize*height);
			    g2.setColor(oldColor);
			int i=0;
			int j=0;
			int barcodeGap=25;
			int btnMrg=10;
			int leftMrg=width+width/3;
			for(String cd:ls) {
				i++;
				Writer writer = new Code128Writer();
//				Writer writer = new QRCodeWriter();
				
				BitMatrix bitMatrix = writer.encode(cd, BarcodeFormat.CODE_128, width, height);
//				BitMatrix bitMatrix = writer.encode(cd, BarcodeFormat.QR_CODE, width, height);
				
				BufferedImage image= MatrixToImageWriter.toBufferedImage(bitMatrix);
				if(i%2==0) {
					 g2.drawImage(image, null, width,j*(height+barcodeGap));
					 g2.drawChars(cd.toCharArray(), 0, cd.length(),leftMrg,(j+1)*(height+barcodeGap)-btnMrg);
					j++;
				}else {
					g2.drawImage(image, null,0,j*(height+barcodeGap));
					g2.drawChars(cd.toCharArray(), 0, cd.length(),leftMrg-width,(j+1)*(height+barcodeGap)-btnMrg);
				}
			}
			g2.dispose();
		    try {
				ImageIO.write(newImage, "jpg", new File("dynamsoftbarcode.jpg")); // save QR image to disk
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		} catch (Exception e) {
		
		}
	}
	
}
